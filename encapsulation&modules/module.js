/*
    Хорошие программисты делят свои проги на модули. Преимущества модулей:
    - независимость и самодастаточность,
    - чистота глобального пространства имён,
    - повторное использование. Есл какой-нибудь модуль был сделан для какого-нибудь сайта, то можно его повторно использовать 
    просто взяв и подклчив к др. сайту и он будет работать, ведь модули самодостаточны и независимы
*/

/* 
    1-ый способ создания модулей без загрязнения глобального пространства переменными
    (function() { 
        ... 
    }()) --> пример самовызывающей анонимной ф-ии.

    Анонимная самовызывающая ф-ия - 1ый и самый распространённый способ создание модулей.
*/
let number = 1;

(function() {
    let number = 356;
    console.log(number);

    return console.log(number + 144);
}());

console.log(number);


// 2-ой способ создания модулей без загрязнения глобального пространства переменными, с использование объектного интерфейса
let user = (function() {
    let privatVar = function() {                                            // Уже просто достать privateVar вот так -- user.privateVar не получиться до тех пор пока её не включат в retunr, тогда её достать уже можно будет
        console.log('Мы в привате, наc не видно');
    }

    return {        
        sayHowAU : function() {
            console.log('Как дела?');
        }
    }
}());

console.log(user);
console.log(user.sayHowAU());


// 3-ий способ создания модулей отличается тем, что все св-ва и методы приватны и в return получаем только те которые нужно для продолжения кода.
let man = (function() {
    let privatVar = function() {                    // Уже просто достать privateVar вот так -- man.privateVar не получиться до тех пор пока её не включат в retunr, и только потом уже её можно достать.
        console.log('Мы в привате, наc не видно');
    },
    sayHowAU = function() {
        console.log('Как дела?');
    }

    return {        
        sayHowAU : sayHowAU
    }
}());

console.log(man);
console.log(man.sayHowAU());